#!/bin/bash
# Simple shell script to run commonly used features

arg_1="$1"
arg_2="$2"
arg_3="$3"

function show_help {
  echo "
  Available commands:

  start [environment]        - Start development environment containers
  stop [environment]         - Stop development environment containers
  exec [container]           - Exec program inside the container
  kill [container]           - Kill a container by name
  config                     - Show docker config
  errors                     - Show apache2 error log
  wipe                       - Remove all docker containers
  top                        - Show top processes
  ps                         - Show stack processes
  build {clean}              - Build containers
  up                         - Bring development environment up
  down                       - Bring development environment down
  db diff                    - Doctrine generate Entity based migration
  db migrate                 - Doctrine run migration
  nginx reload               - Reload nginx
  clear cache                - Clear cache
  help                       - Show this message
"
}

function docker_ps {
  docker-compose ps
}

function docker_kill {
  local $container=$1
  docker-compose kill $container
}

function docker_logs {
  docker-compose logs
}

function docker_top {
  docker-compose top
}

function docker_up {
  docker-compose up
}

function docker_down {
  docker-compose down
}

function docker_wipe {
  docker system prune -a
}

function docker_exec {
  local container=$1
  if [ "$container" = "" ]; then
    container="ocms-php-fpm"
  fi
  docker exec -it -u root:root $container bash
}

function docker_start {
  local env=$1
  if [ "$env" = "" ]; then
    env="dev"
  fi
  if [ -f "./docker-compose.$env.yml" ]; then
    echo "Start containers for $env environment"
    if [ -f "./docker-compose.override.yml" ]; then
      docker-compose \
      -f docker-compose.yml \
      -f docker-compose.override.yml \
      -f docker-compose.$env.yml \
      up -d --remove-orphans
    else
      docker-compose \
      -f docker-compose.yml \
      -f docker-compose.$env.yml \
      up -d --remove-orphans
    fi
    if [ "$env" = "dev" ]; then
      composer_update
      echo "Set NGNIX file permissions on cache director"
      docker exec ocms-nginx-server chmod 0755 var/cache/images
    fi
    docker_db_migrate
  else
    echo "A valid stack environment required, e.g.:"
    echo "./stack start dev"
  fi
}

function docker_push {
  docker build -t push-example .
  # docker push <hub-user>/<repo-name>:<tag>
  #docker push ouxsoft/hoopless_webserver:latest
}

function docker_stop {
  local env=$1
  if [ "$env" = "" ]; then
    env="dev"
  fi
  if [ -f "./docker-compose.$env.yml" ]; then
    echo "Stop containers for $env environment"
    if [ -f "./docker-compose.override.yml" ]; then
      docker-compose \
      -f docker-compose.yml \
      -f docker-compose.override.yml \
      -f docker-compose.$env.yml \
      down
    else
      docker-compose \
      -f docker-compose.yml \
      -f docker-compose.$env.yml \
      down
    fi
  else
    echo "A valid stack environment required, e.g.:"
    echo "./stack stop dev"
  fi
}

function docker_config {
  local env=$1
  if [ "$env" = "" ]; then
    env="dev"
  fi
  if [ -f "./docker-compose.$env.yml" ]; then
    echo "Show config for $env environment"
    if [ -f "./docker-compose.override.yml" ]; then
      docker-compose \
      -f docker-compose.yml \
      -f docker-compose.override.yml \
      -f docker-compose.$env.yml \
      config
    else
      docker-compose \
      -f docker-compose.yml \
      -f docker-compose.$env.yml \
      config
    fi
  else
    echo "A valid stack environment required, e.g.:"
    echo "./stack config dev"
  fi
}

function docker_build {
  local param_1=$1
  echo "Build web server container"
  if [ "$param_1" == "clean" ]; then
    docker-compose build --pull --no-cache
  else
    docker-compose build
  fi
}

function docker_errors {
  echo "Tailing NGINX Error Log"
  docker exec ocms-webserver tail ../var/log/nginx/error.log
}

function docker_db_diff {
  echo "DB Migration Diff"
  docker exec --user root ocms-php-fpm php ./vendor/bin/doctrine-migrations migrations:diff
}

function docker_db_migrate {
  echo "DB Migrate"
  docker exec --user root ocms-php-fpm php ./vendor/bin/doctrine-migrations migrations:migrate
}

function nginx_reload {
  docker exec -it ocms-webserver nginx -s reload
}

function clear_cache {
  rm -r ./app/var/cache/images/*
  #docker exec -it ocms-webserver rm -r /application/var/cache/images/*
}

function composer_update {
  # must be ran outside of Dockerfile due to mount
  # echo "Update composer"
  docker exec --user root ocms-php-fpm composer update -d .
  docker exec --user root ocms-php-fpm composer dump-autoload --optimize -d .
}

if [ "$arg_1" == "start" ]; then
  docker_start $arg_2
elif [ "$arg_1" == "stop" ]; then
  docker_stop $arg_2
elif [ "$arg_1" == "exec" ]; then
  docker_exec $arg_2 ${@:3:99}
elif [ "$arg_1" == "kill" ]; then
  docker_kill $arg_2
elif [ "$arg_1" == "config" ]; then
  docker_config $arg_2
elif [ "$arg_1" == "errors" ]; then
  docker_errors
elif [ "$arg_1" == "wipe" ]; then
  docker_wipe
elif [ "$arg_1" == "top" ]; then
  docker_top
elif [ "$arg_1" == "ps" ]; then
  docker_ps
elif [ "$arg_1" == "build" ]; then
  docker_build $arg_2
elif [ "$arg_1" == "up" ]; then
  docker_up
elif [ "$arg_1" == "down" ]; then
  docker_down
elif [ "$arg_1" == "nginx" ]; then
  if [ "$arg_2" == "reload" ]; then
    nginx_reload
  fi
elif [ "$arg_1" == "clear" ]; then
  if [ "$arg_2" == "cache" ]; then
    clear_cache
  fi
elif [ "$arg_1" == "db" ]; then
  if [ "$arg_2" == "diff" ]; then
    docker_db_diff
  elif [ "$arg_2" == "migrate" ]; then
    docker_db_migrate
  fi
elif [ "$arg_1" == "help" ]; then
  show_help
else
  show_help
fi
